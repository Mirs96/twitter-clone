package com.twitterclone.backend.dto;

import com.twitterclone.backend.model.entities.Tweet;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Data Transfer Object for creating a new tweet.")
public class CreateTweetDto {

    @Schema(description = "Unique identifier of the tweet (generated by server, returned in response)", example = "205", accessMode = Schema.AccessMode.READ_ONLY)
    private long id;

    @Schema(description = "Unique identifier of the user creating the tweet", example = "1", requiredMode = Schema.RequiredMode.REQUIRED)
    private long userId;

    @Schema(description = "Nickname of the user creating the tweet (primarily for response convenience)", example = "johnnyD", accessMode = Schema.AccessMode.READ_ONLY)
    private String userNickname; // This might be redundant if userId is primary, but good for immediate display

    @Schema(description = "Content of the tweet", example = "Hello world! #newbeginnings", requiredMode = Schema.RequiredMode.REQUIRED)
    private String content;

    @Schema(description = "Timestamp of when the tweet was created (generated by server, returned in response)", example = "2023-10-27T12:00:00", accessMode = Schema.AccessMode.READ_ONLY)
    private String createdAt; // Assuming this will be formatted string in response

    public static Tweet fromDto(CreateTweetDto dto) {
        return Tweet.builder()
                .content(dto.getContent())
                .build();
    }
}